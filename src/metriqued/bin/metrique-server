#!/usr/bin/env python
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
# Author: "Chris Ward <cward@redhat.com>

'''
metrique-server.py contains a CLI for metrique server.

    It is possible to start, stop, restart and request
    current running status for metriqued

    # ... ^^^ cube class definition above ^^^ ...
    if __name__ == '__main__':
        from metrique.argparsers import cube_cli
        obj, args = cube_cli(Bug)
        obj.extract(force=args.force)

'''
import os
import time
import signal

from metriqued.defaults import SERVER_CONFIG_PATH, METRIQUE_CONF
from metriqued.defaults import METRIQUE_HTTP_HOST, METRIQUE_HTTP_PORT
from metriqued.config import metrique
from metriqued.tornado.http import HTTPServer


def get_pid(pid_file):
    if os.path.exists(pid_file):
        pid = int(open(pid_file).readlines()[0])
    else:
        pid = 0
    return pid


def stop(pid, pid_file):
    code = 0
    if not pid:
        print "Warning: No pid found (%s)" % pid_file
    else:
        try:
            os.kill(pid, signal.SIGKILL)
        except OSError as e:
            print 'Error: %s' % e
            code = 1
        finally:
            try:
                os.remove(pid_file)
            except OSError:
                pass
    return code


def start():
    code = 0
    try:
        metriqued.start()
    except Exception as e:
        code = 1
        print 'Error: %s' % e
        stop(pid, pid_file)
    return code


def status(pid):
    if pid:
        return 0
    else:
        return 1


if __name__ == '__main__':
    import argparse

    _args = argparse.ArgumentParser(description='metrique server CLI')

    __cmds__ = ['start', 'stop', 'restart', 'status']
    _args.add_argument('command', type=str, choices=__cmds__)

    _args.add_argument('-d', '--debug',
                       type=int, default=True)
    _args.add_argument('-a', '--async-off',
                       action='store_true')

    _args.add_argument('-c', '--server-config-file',
                       type=str, default=METRIQUE_CONF)
    _args.add_argument('-cd', '--server-config-dir',
                       type=str, default=SERVER_CONFIG_PATH)

    _args.add_argument('-H', '--host',
                       type=str, default=METRIQUE_HTTP_HOST)
    _args.add_argument('-P', '--port',
                       type=str, default=METRIQUE_HTTP_PORT)

    # FIXME: in the near future, we'll be able to start up
    # multiple servers in parallel; instance-id would
    # be a integer representing which instance you'd
    # like to interact with...
    #_args.add_argument('-iid', '--instance-id',
    #                   type=int, default=1)

    # parse sys.argv
    args = _args.parse_args()

    # shorten varnames
    cmd = args.command
    debug = args.debug
    async_off = args.async_off

    server_config_file = args.server_config_file
    server_config_dir = args.server_config_dir
    m_conf = metrique(server_config_file, server_config_dir)

    if not args.host:
        host = m_conf.http_host
    else:
        host = args.host

    if not args.port:
        port = m_conf.http_port
    else:
        port = args.port

    async = not async_off  # shawhing!

    metriqued = HTTPServer(host=host, port=port,
                           debug=debug, async=async)

    pid_file = metriqued.metrique_config.pid_file
    pid = get_pid(pid_file)

    print
    if cmd == 'start':
        code = start()
    elif cmd == 'stop':
        code = stop(pid, pid_file)
    elif cmd == 'restart':
        if status(pid) == 0:
            stop(pid, pid_file)
        time.sleep(1)
        code = start()
    elif cmd == 'status':
        if status(pid) == 0:
            print 'Info: Running'
        else:
            print 'Info: Not Running'
    else:
        print 'Not sure what to say, honestly to %s... Try --help ?' % cmd
